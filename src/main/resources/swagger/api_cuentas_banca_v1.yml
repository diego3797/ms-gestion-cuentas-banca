openapi: 3.0.3
info:
  title: Swagger Bank Management - OpenAPI 3.0
  description: |-
    This is a bank customer account management server, where the customer can use and consult their banking products.

  termsOfService: http://swagger.io/terms/
  contact:
    email: apiteam@swagger.io
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.11
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
  - url: https://managementBank.swagger.io/api/v3
tags:
  - name: client
    description: Everything about clients data
    externalDocs:
      description: Find out more
      url: http://swagger.io
  - name: operation
    description: Everything about clients operations
    externalDocs:
      description: Find out more
      url: http://swagger.io
  - name: transfer
    description: Everything about transfer operations accounts
    externalDocs:
      description: Find out more
      url: http://swagger.io
  - name: credit
    description: Everything about clients credits operations
    externalDocs:
      description: Find out more
      url: http://swagger.io
  - name: product
    description: Everything about clients product querys
    externalDocs:
      description: Find out more
      url: http://swagger.io
  - name: reports
    description: Everything about reports of products from client
    externalDocs:
      description: Find out more
      url: http://swagger.io
paths:
  /client:
    post:
      tags:
        - client
      summary: Add a new client in the bank
      description: Add a new client in the bank
      operationId: addClient
      requestBody:
        description: Create a new client in the bank
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ClientRequest'
          application/xml:
            schema:
              $ref: '#/components/schemas/ClientRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ClientRequest'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/ClientResponse'
        '405':
          description: Invalid input
    put:
      tags:
        - client
      summary: Update a client in the bank
      description: Update a client in the bank
      operationId: updClient
      requestBody:
        description: Update a client in the bank
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ClientRequest'
          application/xml:
            schema:
              $ref: '#/components/schemas/ClientRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ClientRequest'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/ClientResponse'
        '405':
          description: Invalid input
  /client/{clientId}:
    delete:
      tags:
        - client
      summary: Deletes a client
      description: delete a client
      operationId: deleteClient
      parameters:
        - name: clientId
          in: path
          description: ID of client to delete
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Invalid client value
    get:
      tags:
        - client
      summary: List all clients from bank
      description: List all clients from bank
      operationId: getClientById
      parameters:
        - name: clientId
          in: path
          description: ID of client to return
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/ClientResponse'
        '400':
          description: Invalid ID supplied
        '404':
          description: client not found
  /client/list:
    get:
      tags:
        - client
      summary: List all clients from bank
      description: List all clients from bank
      operationId: getClients
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: integer
                  format: int32

  /operation/deposit:
    put:
      tags:
        - operation
      summary: Make deposit to count
      description: Make deposit to count
      operationId: registerDeposit
      requestBody:
        description: Make deposit to count
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MovementRequest'
          application/xml:
            schema:
              $ref: '#/components/schemas/MovementRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/MovementRequest'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountOperationResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/AccountOperationResponse'
        '405':
          description: Invalid input
  /operation/withdrawal:
    put:
      tags:
        - operation
      summary: Make withdrawal to count
      description: Make withdrawal to count
      operationId: registerWithdrawal
      requestBody:
        description: Make withdrawal to count
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MovementRequest'
          application/xml:
            schema:
              $ref: '#/components/schemas/MovementRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/MovementRequest'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountOperationResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/AccountOperationResponse'
        '405':
          description: Invalid input

  /transfer/toSelfAccount:
    put:
      tags:
        - transfer
      summary: transfer to your own account
      description: transfer to your own account
      operationId: registerTransftoAccountSelf
      requestBody:
        description: transfer to your own account
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransferRequest'
          application/xml:
            schema:
              $ref: '#/components/schemas/TransferRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TransferRequest'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransferOperationResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/TransferOperationResponse'
        '405':
          description: Invalid input
  /transfer/toAccountThird:
    put:
      tags:
        - transfer
      summary: transfer to the account of a third party
      description: transfer to the account of a third party
      operationId: registerTransftoAccountTercery
      requestBody:
        description: transfer to the account of a third party
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransferRequest'
          application/xml:
            schema:
              $ref: '#/components/schemas/TransferRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TransferRequest'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransferTerceryOperationResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/TransferTerceryOperationResponse'
        '405':
          description: Invalid input

  /credit/pay:
    put:
      tags:
        - credit
      summary: Make pay of credit
      description: Make pay of credit
      operationId: registerPay
      requestBody:
        description: Make pay of credit
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreditRequest'
          application/xml:
            schema:
              $ref: '#/components/schemas/CreditRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CreditRequest'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreditOperationResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/CreditOperationResponse'
        '405':
          description: Invalid input
  /credit/consume:
    put:
      tags:
        - credit
      summary: Make consume of credit
      description: Make consume of credit
      operationId: registerConsume
      requestBody:
        description: Make consume of credit
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreditRequest'
          application/xml:
            schema:
              $ref: '#/components/schemas/CreditRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CreditRequest'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreditOperationResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/CreditOperationResponse'
        '405':
          description: Invalid input

  /product/createAccount:
    put:
      tags:
        - product
      summary: Create account bank
      description: Create account bank
      operationId: registerAccount
      requestBody:
        description: Create account bank
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccountRequest'
          application/xml:
            schema:
              $ref: '#/components/schemas/AccountRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/AccountRequest'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductoAccountResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/ProductoAccountResponse'
        '405':
          description: Invalid input
  /product/associatedDebitCard:
    put:
      tags:
        - product
      summary: Associate debit card with account number
      description: Associate debit card
      operationId: associateDebitCard
      requestBody:
        description: Associate debit card
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AssociateRequest'
          application/xml:
            schema:
              $ref: '#/components/schemas/AssociateRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/AssociateRequest'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AssociateResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/AssociateResponse'
        '405':
          description: Invalid input
  /product/balance/account/{number}:
    get:
      tags:
        - product
      summary: Gets balance of client account number
      description: ets balance of client account number
      operationId: getBalanceProduct
      parameters:
        - name: number
          in: path
          description: Account number of product of client
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BalanceAccountResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/BalanceAccountResponse'
        '400':
          description: Invalid ID supplied
        '404':
          description: product not found
  /product/balance/debit/{numberCard}:
    get:
      tags:
        - product
      summary: Gets balance of debit card
      description: Gets balance of debit card
      operationId: getBalanceDebit
      parameters:
        - name: numberCard
          in: path
          description: card number debit number of product of client
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BalanceAccountResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/BalanceAccountResponse'
        '400':
          description: Invalid ID supplied
        '404':
          description: product not found
  /product/balance/credit/{numberCard}:
    get:
      tags:
        - product
      summary: Gets balance of credit card
      description: Gets balance of credit card
      operationId: getBalanceCredit
      parameters:
        - name: numberCard
          in: path
          description: card number credit of product of client
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BalanceAccountResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/BalanceAccountResponse'
        '400':
          description: Invalid ID supplied
        '404':
          description: product not found
  /product/balance/{numberDocument}:
    get:
      tags:
        - product
      summary: Gets balance all product of client
      description: Gets balance all product of client
      operationId: getAllProduct
      parameters:
        - name: numberDocument
          in: path
          description: number document of client
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductBalanceResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/ProductBalanceResponse'
        '400':
          description: Invalid ID supplied
        '404':
          description: product not found
  /product/movements/{number}:
    get:
      tags:
        - product
      summary: Gets the movements of client account or credit card
      description: Gets the movements of client account or credit card
      operationId: getMovements
      parameters:
        - name: number
          in: path
          description: Account number or Credit number of product of client
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BalanceMovementsResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/BalanceMovementsResponse'
        '400':
          description: Invalid ID supplied
        '404':
          description: client not found

  /report/balanceAllProduct/{numberDocument}:
    get:
      tags:
        - reports
      summary: Gets report the balance of all products from client
      description: Gets report the balance of all products from client
      operationId: getReportBalanceProducts
      parameters:
        - name: numberDocument
          in: path
          description: client document number
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
        '400':
          description: Invalid ID supplied
        '404':
          description: client not found
  /report/commissionbyProduct/{accountNumber}:
    get:
      tags:
        - reports
      summary: Gets report commission by products from client
      description: Gets report commission by products from client
      operationId: getReportCommisionByProduct
      parameters:
        - name: accountNumber
          in: path
          description: client document number
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
        '400':
          description: Invalid ID supplied
        '404':
          description: client not found
  /report/movementsCards/{numberDocument}:
    get:
      tags:
        - reports
      summary: Gets report movements from debit and credit card
      description: Gets report movements from debit and credit card
      operationId: getReportMovementsCards
      parameters:
        - name: numberDocument
          in: path
          description: client document number
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
        '400':
          description: Invalid ID supplied
        '404':
          description: client not found

components:
  schemas:
    ClientRequest:
      type: object
      properties:
        clientType:
          type: string
          example: "Personal"
        dataCompany:
          $ref: '#/components/schemas/DataCompany'
        dataPersonal:
          $ref: '#/components/schemas/DataPersonal'
        email:
          type: string
          example: "jorge.velz@gmail.com"
        phono:
          type: string
          example: "956885231"
        address:
          $ref: '#/components/schemas/Address'
        product:
          $ref: '#/components/schemas/Product'
      xml:
        name: clientRequest
      required:
        - clientType
        - email
        - phono
        - address
        - product
    ClientResponse:
      type: object
      properties:
        id:
          type: string
          example: "65addeafbd32677c7efd0b6e"
        clientType:
          type: string
          example: "Personal"
        dataCompany:
          $ref: '#/components/schemas/DataCompany'
        dataPersonal:
          $ref: '#/components/schemas/DataPersonal'
        email:
          type: string
          example: "jorge.velz@gmail.com"
        phono:
          type: string
          example: "956885231"
        address:
          $ref: '#/components/schemas/Address'
        product:
          $ref: '#/components/schemas/Product'
        ubigeo:
          $ref: '#/components/schemas/Ubigeo'
      xml:
        name: clientResponse
    DataPersonal:
      type: object
      properties:
        documentType:
          type: string
          example: "1"
        documentNumber:
          type: string
          example: "45859966"
        name:
          type: string
          example: "Jorge"
        lastFather:
          type: string
          example: "Velazco"
        lastMother:
          type: string
          example: "Peralta"
        birthdate:
          type: string
          example: "1985-10-12"
      xml:
        name: dataPersonal
      required:
        - documentType
        - documentNumber
        - name
        - lastFather
        - lastMother
        - birthdate
    DataCompany:
      type: object
      properties:
        ruc:
          type: string
          example: "10458899999"
        name:
          type: string
          example: "Cementos Lima SAC"
        dateCreationCompany:
          type: string
          example: "2019-10-22"
      xml:
        name: dataCompany
      required:
        - ruc
        - name
        - dateCreationCompany
    Address:
      type: object
      properties:
        street:
          type: string
          example: "Lytton Ave"
        number:
          type: string
          example: "145"
        district:
          type: string
          example: "San Isidro"
        province:
          type: string
          example: "Lima"
        state:
          type: string
          example: "Lima"
      xml:
        name: address
      required:
        - street
        - number
        - district
        - province
        - state
    Product:
      type: object
      properties:
        account:
          type: array
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/Account'
        credit:
          type: array
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/Credit'
        debit:
          type: array
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/Account'
      xml:
        name: product
    Account:
      type: object
      properties:
        type:
          type: string
          example: "Ahorro"
        card:
          type: string
          example: "4552758596322526"
        number:
          type: string
          example: "1992001451121"
        dayMovement:
          type: number
          example: 15
        movements:
          type: array
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/Movements'
        dateCreation:
          type: string
          example: "2023-02-15 18:35:25"
        sucursal:
          $ref: '#/components/schemas/Sucursal'
        balance:
          type: number
          example: 3000.00
      xml:
        name: account
      required:
        - type
        - number
        - movements
        - province
        - sucursal
        - balance
    Credit:
      type: object
      properties:
        type:
          type: string
          example: "Personal"
        card:
          type: string
          example: "3777548264581"
        number:
          type: string
          example: "15484554144"
        limitCredit:
          type: number
          example: 7000.00
        movements:
          type: array
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/Movements'
        company:
          $ref: '#/components/schemas/Company'
        dateCreation:
          type: string
          example: "2023-02-15 18:35:25"
        sucursal:
          $ref: '#/components/schemas/Sucursal'
        balance:
          type: number
          example: 7000.00
      xml:
        name: credit
      required:
        - type
        - card
        - number
        - limitCredit
        - movements
        - sucursal
        - balance
    CreditOperationResponse:
      type: object
      properties:
        numberOperation:
          type: string
          example: "10225"
        typeCredit:
          type: string
          example: "Personal"
        card:
          type: string
          example: "3777548264581"
        limitCredit:
          type: number
          example: 7000.00
        balance:
          type: number
          example: 7000.00
      xml:
        name: creditOperationResponse
    AccountOperationResponse:
      type: object
      properties:
        numberOperation:
          type: string
          example: "10225"
        typeAccount:
          type: string
          example: "Personal"
        card:
          type: string
          example: "3777548264581"
        number:
          type: string
          example: "15484554144"
        balance:
          type: number
          example: 7000.00
      xml:
        name: creditOperationResponse
    Movements:
      type: object
      properties:
        numberOperation:
          type: string
          example: "10225"
        dateOperation:
          type: string
          example: "2023-01-10 10:05:45"
        operationType:
          type: string
          description: "Tipo de Operacion"
          example: "Retiro"
          enum:
            - RETIRO
            - DEPOSITO
            - CONSUMO
        comission:
          type: number
          example: 2.05
        grossAmount:
          type: number
          example: 40.00
        amount:
          type: number
          example: 2.05
      xml:
        name: movements
      required:
        - operationType
        - amount
    Company:
      type: object
      properties:
        autorizedSignatory:
          type: array
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/DataPersonal'
        titular:
          type: array
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/DataPersonal'
      xml:
        name: company
    Sucursal:
      type: object
      properties:
        id:
          type: string
          example: "1544"
        name:
          type: string
          example: "Sucurcal Las Camelias"
        address:
          type: string
          example: "Calle Las Camelias 651"
        nameOperator:
          type: string
          example: "Patricio Franco Mena"
        nameManager:
          type: string
          example: "Susana Rios Torres"
      xml:
        name: sucursal
      required:
        - id
        - name
        - address
        - nameOperator
        - nameManager
    Ubigeo:
      type: object
      properties:
        userCreation:
          type: string
          example: "user01"
        dateCreation:
          type: string
          example: "2023-01-15 19:22:05"
        userUpdate:
          type: string
          example: "user02"
        dateUpdate:
          type: string
          example: "2023-01-15 19:22:05"
      xml:
        name: ubigeo

    MovementRequest:
      type: object
      properties:
        numberAccount:
          type: string
          example: "1992001451121"
        amount:
          type: number
          example: 45874.00
      xml:
        name: movementRequest
      required:
        - typeAccount
        - numberAccount
        - amount

    TransferRequest:
      type: object
      properties:
        numberAccountFrom:
          type: string
          example: "15484554142"
        numberAccountDestiny:
          type: string
          example: "15484554143"
        amount:
          type: number
          example: 120.00
      xml:
        name: transferRequest
      required:
        - amount
    TransferOperationResponse:
      type: object
      properties:
        numberOperation:
          type: string
          example: "10225"
        typeAccountFrom:
          type: string
          example: "Personal"
        numberAccountFrom:
          type: string
          example: "15484554143"
        typeAccountDestiny:
          type: string
          example: "Cta Corriente"
        numberAccountDestiny:
          type: string
          example: "15484554144"
        amountTransfer:
          type: number
          example: 120.00
      xml:
        name: transferOperationResponse
    TransferTerceryOperationResponse:
      type: object
      properties:
        numberOperation:
          type: string
          example: "10225"
        typeAccountFrom:
          type: string
          example: "Personal"
        numberAccountFrom:
          type: string
          example: "15484554143"
        typeAccountDestiny:
          type: string
          example: "Cta Corriente"
        numberAccountDestiny:
          type: string
          example: "15484554144"
        numberDocumentThird:
          type: string
          example: "45876963"
        nameThird:
          type: string
          example: "Adolfo Carrion Santos"
        amountTransfer:
          type: number
          example: 120.00
      xml:
        name: transferTerceryOperationResponse

    CreditRequest:
      type: object
      properties:
        card:
          type: string
          example: "4552758596322526"
        payType:
          type: string
          description: "Pay type"
          example: "1"
          enum:
            - PAGO_MINIMO, 1
            - PAGO_TOTAL, 2
            - ABONO, 3
        amount:
          type: number
          example: 120.00
      xml:
        name: creditRequest
      required:
        - creditType
        - card
        - payType
        - amount

    AccountRequest:
      type: object
      properties:
        numberDocument:
          type: string
          example: "45692341"
        clientType:
          type: string
          example: "Personal"
        profileType:
          type: string
          example: "VIP"
        accountType:
          type: string
          example: "Ahorro"
        sucursal:
          $ref: '#/components/schemas/Sucursal'
        amount:
          type: number
          example: 120.00
      xml:
        name: accountRequest
      required:
        - numberDocument
        - accountType
        - profileType
        - sucursal
        - amount
    ProductoAccountResponse:
      type: object
      properties:
        clientType:
          type: string
          example: "Personal"
        profileType:
          type: string
          example: "VIP"
        dataCompany:
          $ref: '#/components/schemas/DataCompany'
        dataPersonal:
          $ref: '#/components/schemas/DataPersonal'
        product:
          $ref: '#/components/schemas/AccountResponse'
      xml:
        name: productoAccountResponse
    AccountResponse:
      type: object
      properties:
        type:
          type: string
          example: "Ahorro"
        number:
          type: string
          example: "1992001451121"
        movements:
          type: array
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/Movements'
        sucursal:
          $ref: '#/components/schemas/Sucursal'
        balance:
          type: number
          example: 3000.00
      xml:
        name: accountResponse

    BalanceAccountResponse:
      type: object
      properties:
        typeAccount:
          type: string
          example: "Ahorro"
        numberCard:
          type: string
          example: "4552758596322526"
        numberAccount:
          type: string
          example: "1992001451121"
        balance:
          type: number
          example: 3000.00
      xml:
        name: balanceAccountResponse
    BalanceCreditResponse:
      type: object
      properties:
        type:
          type: string
          example: "Personal"
        card:
          type: string
          example: "4552758596322526"
        number:
          type: string
          example: "1992001451121"
        limitCredit:
          type: number
          example: 8000.00
        balance:
          type: number
          example: 3000.00
      xml:
        name: balanceCreditResponse
    BalanceDebitResponse:
      type: object
      properties:
        card:
          type: string
          example: "4552758596322526"
        balance:
          type: number
          example: 3000.00
      xml:
        name: balanceDebitResponse
    ProductBalanceResponse:
      type: object
      properties:
        account:
          type: array
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/BalanceAccountResponse'
        credit:
          type: array
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/BalanceCreditResponse'
        debit:
          type: array
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/BalanceDebitResponse'
        totalBalance:
          type: number
          example: 3000.00
      xml:
        name: productBalanceResponse
    BalanceMovementsResponse:
      type: object
      properties:
        type:
          type: string
          example: "Ahorro"
        card:
          type: string
          example: "4552758596322526"
        number:
          type: string
          example: "1992001451121"
        movements:
          type: array
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/Movements'
        balance:
          type: number
          example: 3000.00
      xml:
        name: balanceMovementsResponse

    AssociateRequest:
      type: object
      properties:
        documentNumber:
          type: string
          example: "45879965"
        debitCard:
          type: string
          example: "455785264586"
        accountAssociate:
          $ref: '#/components/schemas/AssociateAccountRequest'
      xml:
        name: associateRequest
      required:
        - documentNumber
        - debitCard
        - accountAssociate
    AssociateAccountRequest:
      type: object
      properties:
        accountNumber:
          type: string
          example: "1991456912568"
        acountType:
          type: string
          example: "Ahorro"
      xml:
        name: associateAccountRequest
      required:
        - accountNumber
        - acountType
    AssociateResponse:
      type: object
      properties:
        clientType:
          type: string
          example: "Personal"
        profileType:
          type: string
          example: "VIP"
        dataCompany:
          $ref: '#/components/schemas/DataCompany'
        dataPersonal:
          $ref: '#/components/schemas/DataPersonal'
        debit:
          type: array
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/DebitResponse'
      xml:
        name: productoAccountResponse
    DebitResponse:
      type: object
      properties:
        card:
          type: string
          example: "455785264586"
        assciateAccount:
          type: array
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/AccountDebitResponse'
        balance:
          type: number
          example: 3000.00
      xml:
        name: debitResponse
    AccountDebitResponse:
      type: object
      properties:
        accountNumber:
          type: string
          example: "1991456912568"
        dateCreation:
          type: string
          example: "2023-02-15 18:35:25"
      xml:
        name: accountDebitResponse